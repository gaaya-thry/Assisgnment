import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class JobCounter {
    public static Map<String, JobCounts> countJobsByDate(String filePath) {
        Map<String, JobCounts> jobCountsByDate = new HashMap<>();
        Map<String, List<String>> userErrorMessagesByDate = new HashMap<>();

        int totalJobsCreated = 0;
        int totalJobsEnded = 0;
        int totalOpteronJobs = 0;
        int totalEpycJobs = 0;
        int totalGpuJobs = 0;
        int totalJobErrors = 0;

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            Map<String, Long> jobStartTimes = new HashMap<>();
            while ((line = br.readLine()) != null) {
                String[] tokens = line.split(" ");
                String timestamp = tokens[0].substring(1, tokens[0].length() - 1); // Removing the brackets
                String date = timestamp.substring(0, 10);

                JobCounts counts = jobCountsByDate.computeIfAbsent(date, k -> new JobCounts());
                List<String> userErrorMessages = userErrorMessagesByDate.computeIfAbsent(date, k -> new ArrayList<>());

                if (line.contains("_slurm_rpc_submit_batch_job")) {
                    counts.incrementJobsCreated();
                    totalJobsCreated++;
                    String jobId = getJobId(line);
                    jobStartTimes.put(jobId, parseTimeToMillis(timestamp));
                } else if (line.contains("_job_complete:")) {
                    counts.incrementJobsEnded();
                    totalJobsEnded++;
                    String jobId = getJobId(line);
                    if (jobStartTimes.containsKey(jobId)) {
                        long startTime = jobStartTimes.get(jobId);
                        long endTime = parseTimeToMillis(timestamp);
                        long executionTime = endTime - startTime;
                        counts.addExecutionTime(executionTime);
                        counts.incrementJobCount(); // Increment only if the job has both start and end time
                    }
                } else if (line.contains("Partition=cpu-opteron")) {
                    counts.incrementOpteronJobs();
                    totalOpteronJobs++;
                } else if (line.contains("Partition=cpu-epyc")) {
                    counts.incrementEpycJobs();
                    totalEpycJobs++;
                } else if (line.contains("Partition=gpu")) {
                    counts.incrementGpuJobs();
                    totalGpuJobs++;
                } else if (line.contains("error: This association")) {
                    counts.incrementJobErrors();
                    totalJobErrors++;
                    userErrorMessages.add("[" + timestamp + "] " + line.trim());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Assign user error messages to corresponding dates
        for (String date : jobCountsByDate.keySet()) {
            JobCounts counts = jobCountsByDate.get(date);
            counts.setUserErrorMessages(userErrorMessagesByDate.get(date));
        }

        // Add totals to the map under a special key "Total"
        jobCountsByDate.put("Total", new JobCounts(totalJobsCreated, totalJobsEnded, totalOpteronJobs, totalEpycJobs, totalGpuJobs, totalJobErrors, 0, Collections.emptyList()));

        return jobCountsByDate;
    }

    private static long parseTimeToMillis(String timestamp) {
        String[] timeParts = timestamp.split("[T:.]");
        long hours = Long.parseLong(timeParts[1]) * 3600000;
        long minutes = Long.parseLong(timeParts[2]) * 60000;
        long seconds = Long.parseLong(timeParts[3]) * 1000;
        long millis = Long.parseLong(timeParts[4]);
        return hours + minutes + seconds + millis;
    }

    private static String getJobId(String line) {
        String[] tokens = line.split(" ");
        for (String token : tokens) {
            if (token.startsWith("JobId=")) {
                return token.split("=")[1];
            }
        }
        return null;
    }

    public static class JobCounts {
        private int jobsCreated;
        private int jobsEnded;
        private int opteronJobs;
        private int epycJobs;
        private int gpuJobs;
        private int jobErrors;
        private long totalExecutionTime;
        private int jobCount;  // Total job count for calculating average execution time
        private List<String> userErrorMessages; // User error messages

        public JobCounts() {
            this.userErrorMessages = new ArrayList<>();
        }

        public JobCounts(int jobsCreated, int jobsEnded, int opteronJobs, int epycJobs, int gpuJobs, int jobErrors, long totalExecutionTime, List<String> userErrorMessages) {
            this.jobsCreated = jobsCreated;
            this.jobsEnded = jobsEnded;
            this.opteronJobs = opteronJobs;
            this.epycJobs = epycJobs;
            this.gpuJobs = gpuJobs;
            this.jobErrors = jobErrors;
            this.totalExecutionTime = totalExecutionTime;
            this.userErrorMessages = userErrorMessages;
        }

        public void incrementJobsCreated() {
            jobsCreated++;
        }

        public void incrementJobsEnded() {
            jobsEnded++;
        }

        public void incrementOpteronJobs() {
            opteronJobs++;
        }

        public void incrementEpycJobs() {
            epycJobs++;
        }

        public void incrementGpuJobs() {
            gpuJobs++;
        }

        public void incrementJobErrors() {
            jobErrors++;
        }

        public void addExecutionTime(long executionTime) {
            totalExecutionTime += executionTime;
        }

        public void incrementJobCount() {
            jobCount++;
        }

        public void setUserErrorMessages(List<String> userErrorMessages) {
            this.userErrorMessages = userErrorMessages;
        }

        public int getJobsCreated() {
            return jobsCreated;
        }

        public int getJobsEnded() {
            return jobsEnded;
        }

        public int getOpteronJobs() {
            return opteronJobs;
        }

        public int getEpycJobs() {
            return epycJobs;
        }

        public int getGpuJobs() {
            return gpuJobs;
        }

        public int getJobErrors() {
            return jobErrors;
        }

        public long getTotalExecutionTime() {
            return totalExecutionTime;
        }

        public long getAvgExecutionTime() {
            return jobCount > 0 ? totalExecutionTime / jobCount : 0;
        }

        public List<String> getUserErrorMessages() {
            return userErrorMessages;
        }
    }
}




